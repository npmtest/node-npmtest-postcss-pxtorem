{"/home/travis/build/npmtest/node-npmtest-postcss-pxtorem/test.js":"/* istanbul instrument in package npmtest_postcss_pxtorem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-pxtorem/lib.npmtest_postcss_pxtorem.js":"/* istanbul instrument in package npmtest_postcss_pxtorem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_postcss_pxtorem = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_postcss_pxtorem = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-pxtorem/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-postcss-pxtorem && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_postcss_pxtorem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_postcss_pxtorem\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_postcss_pxtorem.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_postcss_pxtorem.rollup.js'] =\n            local.assetsDict['/assets.npmtest_postcss_pxtorem.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_postcss_pxtorem.__dirname + '/lib.npmtest_postcss_pxtorem.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-pxtorem/node_modules/postcss-pxtorem/index.js":"'use strict';\n\nvar postcss = require('postcss');\nvar objectAssign = require('object-assign');\nvar pxRegex = require('./lib/pixel-unit-regex');\nvar filterPropList = require('./lib/filter-prop-list');\n\nvar defaults = {\n    rootValue: 16,\n    unitPrecision: 5,\n    selectorBlackList: [],\n    propList: ['font', 'font-size', 'line-height', 'letter-spacing'],\n    replace: true,\n    mediaQuery: false,\n    minPixelValue: 0\n};\n\nvar legacyOptions = {\n    'root_value': 'rootValue',\n    'unit_precision': 'unitPrecision',\n    'selector_black_list': 'selectorBlackList',\n    'prop_white_list': 'propList',\n    'media_query': 'mediaQuery',\n    'propWhiteList': 'propList'\n};\n\nmodule.exports = postcss.plugin('postcss-pxtorem', function (options) {\n\n    convertLegacyOptions(options);\n\n    var opts = objectAssign({}, defaults, options);\n    var pxReplace = createPxReplace(opts.rootValue, opts.unitPrecision, opts.minPixelValue);\n\n    var satisfyPropList = createPropListMatcher(opts.propList);\n\n    return function (css) {\n\n        css.walkDecls(function (decl, i) {\n            // This should be the fastest test and will remove most declarations\n            if (decl.value.indexOf('px') === -1) return;\n\n            if (!satisfyPropList(decl.prop)) return;\n\n            if (blacklistedSelector(opts.selectorBlackList, decl.parent.selector)) return;\n\n            var value = decl.value.replace(pxRegex, pxReplace);\n\n            // if rem unit already exists, do not add or replace\n            if (declarationExists(decl.parent, decl.prop, value)) return;\n\n            if (opts.replace) {\n                decl.value = value;\n            } else {\n                decl.parent.insertAfter(i, decl.clone({ value: value }));\n            }\n        });\n\n        if (opts.mediaQuery) {\n            css.walkAtRules('media', function (rule) {\n                if (rule.params.indexOf('px') === -1) return;\n                rule.params = rule.params.replace(pxRegex, pxReplace);\n            });\n        }\n\n    };\n});\n\nfunction convertLegacyOptions(options) {\n    if (typeof options !== 'object') return;\n    if (\n            (\n                (typeof options['prop_white_list'] !== 'undefined' && options['prop_white_list'].length === 0) ||\n                (typeof options.propWhiteList !== 'undefined' && options.propWhiteList.length === 0)\n            ) &&\n            typeof options.propList === 'undefined'\n        ) {\n        options.propList = ['*'];\n        delete options['prop_white_list'];\n        delete options.propWhiteList;\n    }\n    Object.keys(legacyOptions).forEach(function (key) {\n        if (options.hasOwnProperty(key)) {\n            options[legacyOptions[key]] = options[key];\n            delete options[key];\n        }\n    });\n}\n\nfunction createPxReplace (rootValue, unitPrecision, minPixelValue) {\n    return function (m, $1) {\n        if (!$1) return m;\n        var pixels = parseFloat($1);\n        if (pixels < minPixelValue) return m;\n        var fixedVal = toFixed((pixels / rootValue), unitPrecision);\n        return (fixedVal === 0) ? '0' : fixedVal + 'rem';\n    };\n}\n\nfunction toFixed(number, precision) {\n    var multiplier = Math.pow(10, precision + 1),\n    wholeNumber = Math.floor(number * multiplier);\n    return Math.round(wholeNumber / 10) * 10 / multiplier;\n}\n\nfunction declarationExists(decls, prop, value) {\n    return decls.some(function (decl) {\n        return (decl.prop === prop && decl.value === value);\n    });\n}\n\nfunction blacklistedSelector(blacklist, selector) {\n    if (typeof selector !== 'string') return;\n    return blacklist.some(function (regex) {\n        if (typeof regex === 'string') return selector.indexOf(regex) !== -1;\n        return selector.match(regex);\n    });\n}\n\nfunction createPropListMatcher(propList) {\n    var hasWild = propList.indexOf('*') > -1;\n    var matchAll = (hasWild && propList.length === 1);\n    var lists = {\n        exact: filterPropList.exact(propList),\n        contain: filterPropList.contain(propList),\n        startWith: filterPropList.startWith(propList),\n        endWith: filterPropList.endWith(propList),\n        notExact: filterPropList.notExact(propList),\n        notContain: filterPropList.notContain(propList),\n        notStartWith: filterPropList.notStartWith(propList),\n        notEndWith: filterPropList.notEndWith(propList)\n    };\n    return function (prop) {\n        if (matchAll) return true;\n        return (\n            (\n                hasWild ||\n                lists.exact.indexOf(prop) > -1 ||\n                lists.contain.some(function (m) {\n                    return prop.indexOf(m) > -1;\n                }) ||\n                lists.startWith.some(function (m) {\n                    return prop.indexOf(m) === 0;\n                }) ||\n                lists.endWith.some(function (m) {\n                    return prop.indexOf(m) === prop.length - m.length;\n                })\n            ) &&\n            !(\n                lists.notExact.indexOf(prop) > -1 ||\n                lists.notContain.some(function (m) {\n                    return prop.indexOf(m) > -1;\n                }) ||\n                lists.notStartWith.some(function (m) {\n                    return prop.indexOf(m) === 0;\n                }) ||\n                lists.notEndWith.some(function (m) {\n                    return prop.indexOf(m) === prop.length - m.length;\n                })\n            )\n        );\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-postcss-pxtorem/node_modules/postcss-pxtorem/lib/pixel-unit-regex.js":"// excluding regex trick: http://www.rexegg.com/regex-best-trick.html\n\n// Not anything inside double quotes\n// Not anything inside single quotes\n// Not anything inside url()\n// Any digit followed by px\n// !singlequotes|!doublequotes|!url()|pixelunit\n\nmodule.exports = /\"[^\"]+\"|'[^']+'|url\\([^\\)]+\\)|(\\d*\\.?\\d+)px/ig;\n","/home/travis/build/npmtest/node-npmtest-postcss-pxtorem/node_modules/postcss-pxtorem/lib/filter-prop-list.js":"module.exports = {\n    exact: function (list) {\n        return list.filter(function (m) {\n            return m.match(/^[^\\*\\!]+$/);\n        });\n    },\n    contain: function (list) {\n        return list.filter(function (m) {\n            return m.match(/^\\*.+\\*$/);\n        }).map(function (m) {\n            return m.substr(1, m.length - 2);\n        });\n    },\n    endWith: function (list) {\n        return list.filter(function (m) {\n            return m.match(/^\\*[^\\*]+$/);\n        }).map(function (m) {\n            return m.substr(1);\n        });\n    },\n    startWith: function (list) {\n        return list.filter(function (m) {\n            return m.match(/^[^\\*\\!]+\\*$/);\n        }).map(function (m) {\n            return m.substr(0, m.length - 1);\n        });\n    },\n    notExact: function (list) {\n        return list.filter(function (m) {\n            return m.match(/^\\![^\\*].*$/);\n        }).map(function (m) {\n            return m.substr(1);\n        });\n    },\n    notContain: function (list) {\n        return list.filter(function (m) {\n            return m.match(/^\\!\\*.+\\*$/);\n        }).map(function (m) {\n            return m.substr(2, m.length - 3);\n        });\n    },\n    notEndWith: function (list) {\n        return list.filter(function (m) {\n            return m.match(/^\\!\\*[^\\*]+$/);\n        }).map(function (m) {\n            return m.substr(2);\n        });\n    },\n    notStartWith: function (list) {\n        return list.filter(function (m) {\n            return m.match(/^\\![^\\*]+\\*$/);\n        }).map(function (m) {\n            return m.substr(1, m.length - 2);\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-postcss-pxtorem/node_modules/postcss-pxtorem/spec/pxtorem-spec.js":"// Jasmine unit tests\n// To run tests, run these commands from the project root:\n// 1. `npm install -g jasmine-node`\n// 2. `jasmine-node spec`\n\n/* global describe, it, expect */\n\n'use strict';\nvar postcss = require('postcss');\nvar pxtorem = require('..');\nvar basicCSS = '.rule { font-size: 15px }';\nvar filterPropList = require('../lib/filter-prop-list');\n\ndescribe('pxtorem', function () {\n    it('should work on the readme example', function () {\n        var input = 'h1 { margin: 0 0 20px; font-size: 32px; line-height: 1.2; letter-spacing: 1px; }';\n        var output = 'h1 { margin: 0 0 20px; font-size: 2rem; line-height: 1.2; letter-spacing: 0.0625rem; }';\n        var processed = postcss(pxtorem()).process(input).css;\n\n        expect(processed).toBe(output);\n    });\n\n    it('should replace the px unit with rem', function () {\n        var processed = postcss(pxtorem()).process(basicCSS).css;\n        var expected = '.rule { font-size: 0.9375rem }';\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should ignore non px properties', function () {\n        var expected = '.rule { font-size: 2em }';\n        var processed = postcss(pxtorem()).process(expected).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should handle < 1 values and values without a leading 0 - legacy', function () {\n        var rules = '.rule { margin: 0.5rem .5px -0.2px -.2em }';\n        var expected = '.rule { margin: 0.5rem 0.03125rem -0.0125rem -.2em }';\n        var options = {\n            propWhiteList: ['margin']\n        };\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should handle < 1 values and values without a leading 0', function () {\n        var rules = '.rule { margin: 0.5rem .5px -0.2px -.2em }';\n        var expected = '.rule { margin: 0.5rem 0.03125rem -0.0125rem -.2em }';\n        var options = {\n            propList: ['margin']\n        };\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should not add properties that already exist', function () {\n        var expected = '.rule { font-size: 16px; font-size: 1rem; }';\n        var processed = postcss(pxtorem()).process(expected).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should remain unitless if 0', function () {\n        var expected = '.rule { font-size: 0px; font-size: 0; }';\n        var processed = postcss(pxtorem()).process(expected).css;\n\n        expect(processed).toBe(expected);\n    });\n});\n\ndescribe('value parsing', function () {\n    it('should not replace values in double quotes or single quotes - legacy', function () {\n        var options = {\n            propWhiteList: []\n        };\n        var rules = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 16px; }';\n        var expected = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 1rem; }';\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should not replace values in double quotes or single quotes', function () {\n        var options = {\n            propList: ['*']\n        };\n        var rules = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 16px; }';\n        var expected = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 1rem; }';\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should not replace values in `url()` - legacy', function () {\n        var options = {\n            propWhiteList: []\n        };\n        var rules = '.rule { background: url(16px.jpg); font-size: 16px; }';\n        var expected = '.rule { background: url(16px.jpg); font-size: 1rem; }';\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should not replace values in `url()`', function () {\n        var options = {\n            propList: ['*']\n        };\n        var rules = '.rule { background: url(16px.jpg); font-size: 16px; }';\n        var expected = '.rule { background: url(16px.jpg); font-size: 1rem; }';\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n});\n\ndescribe('rootValue', function () {\n    // Deprecate\n    it('should replace using a root value of 10 - legacy', function () {\n        var expected = '.rule { font-size: 1.5rem }';\n        var options = {\n            root_value: 10\n        };\n        var processed = postcss(pxtorem(options)).process(basicCSS).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should replace using a root value of 10', function () {\n        var expected = '.rule { font-size: 1.5rem }';\n        var options = {\n            rootValue: 10\n        };\n        var processed = postcss(pxtorem(options)).process(basicCSS).css;\n\n        expect(processed).toBe(expected);\n    });\n});\n\ndescribe('unitPrecision', function () {\n    // Deprecate\n    it('should replace using a decimal of 2 places - legacy', function () {\n        var expected = '.rule { font-size: 0.94rem }';\n        var options = {\n            unit_precision: 2\n        };\n        var processed = postcss(pxtorem(options)).process(basicCSS).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should replace using a decimal of 2 places', function () {\n        var expected = '.rule { font-size: 0.94rem }';\n        var options = {\n            unitPrecision: 2\n        };\n        var processed = postcss(pxtorem(options)).process(basicCSS).css;\n\n        expect(processed).toBe(expected);\n    });\n});\n\ndescribe('propWhiteList', function () {\n    // Deprecate\n    it('should only replace properties in the white list - legacy', function () {\n        var expected = '.rule { font-size: 15px }';\n        var options = {\n            prop_white_list: ['font']\n        };\n        var processed = postcss(pxtorem(options)).process(basicCSS).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should only replace properties in the white list - legacy', function () {\n        var expected = '.rule { font-size: 15px }';\n        var options = {\n            propWhiteList: ['font']\n        };\n        var processed = postcss(pxtorem(options)).process(basicCSS).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should only replace properties in the white list - legacy', function () {\n        var css = '.rule { margin: 16px; margin-left: 10px }';\n        var expected = '.rule { margin: 1rem; margin-left: 10px }';\n        var options = {\n            propWhiteList: ['margin']\n        };\n        var processed = postcss(pxtorem(options)).process(css).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should only replace properties in the prop list', function () {\n        var css = '.rule { font-size: 16px; margin: 16px; margin-left: 5px; padding: 5px; padding-right: 16px }';\n        var expected = '.rule { font-size: 1rem; margin: 1rem; margin-left: 5px; padding: 5px; padding-right: 1rem }';\n        var options = {\n            propWhiteList: ['*font*', 'margin*', '!margin-left', '*-right', 'pad']\n        };\n        var processed = postcss(pxtorem(options)).process(css).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should only replace properties in the prop list with wildcard', function () {\n        var css = '.rule { font-size: 16px; margin: 16px; margin-left: 5px; padding: 5px; padding-right: 16px }';\n        var expected = '.rule { font-size: 16px; margin: 1rem; margin-left: 5px; padding: 5px; padding-right: 16px }';\n        var options = {\n            propWhiteList: ['*', '!margin-left', '!*padding*', '!font*']\n        };\n        var processed = postcss(pxtorem(options)).process(css).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should replace all properties when white list is empty', function () {\n        var rules = '.rule { margin: 16px; font-size: 15px }';\n        var expected = '.rule { margin: 1rem; font-size: 0.9375rem }';\n        var options = {\n            propWhiteList: []\n        };\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n});\n\ndescribe('selectorBlackList', function () {\n    // Deprecate\n    it('should ignore selectors in the selector black list - legacy', function () {\n        var rules = '.rule { font-size: 15px } .rule2 { font-size: 15px }';\n        var expected = '.rule { font-size: 0.9375rem } .rule2 { font-size: 15px }';\n        var options = {\n            selector_black_list: ['.rule2']\n        };\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should ignore selectors in the selector black list', function () {\n        var rules = '.rule { font-size: 15px } .rule2 { font-size: 15px }';\n        var expected = '.rule { font-size: 0.9375rem } .rule2 { font-size: 15px }';\n        var options = {\n            selectorBlackList: ['.rule2']\n        };\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should ignore every selector with `body$`', function () {\n        var rules = 'body { font-size: 16px; } .class-body$ { font-size: 16px; } .simple-class { font-size: 16px; }';\n        var expected = 'body { font-size: 1rem; } .class-body$ { font-size: 16px; } .simple-class { font-size: 1rem; }';\n        var options = {\n            selectorBlackList: ['body$']\n        };\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should only ignore exactly `body`', function () {\n        var rules = 'body { font-size: 16px; } .class-body { font-size: 16px; } .simple-class { font-size: 16px; }';\n        var expected = 'body { font-size: 16px; } .class-body { font-size: 1rem; } .simple-class { font-size: 1rem; }';\n        var options = {\n            selectorBlackList: [/^body$/]\n        };\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n});\n\ndescribe('replace', function () {\n    it('should leave fallback pixel unit with root em value', function () {\n        var options = {\n            replace: false\n        };\n        var processed = postcss(pxtorem(options)).process(basicCSS).css;\n        var expected = '.rule { font-size: 15px; font-size: 0.9375rem }';\n\n        expect(processed).toBe(expected);\n    });\n});\n\ndescribe('mediaQuery', function () {\n    // Deprecate\n    it('should replace px in media queries', function () {\n        var options = {\n            media_query: true\n        };\n        var processed = postcss(pxtorem(options)).process('@media (min-width: 500px) { .rule { font-size: 16px } }').css;\n        var expected = '@media (min-width: 31.25rem) { .rule { font-size: 1rem } }';\n\n        expect(processed).toBe(expected);\n    });\n\n    it('should replace px in media queries', function () {\n        var options = {\n            mediaQuery: true\n        };\n        var processed = postcss(pxtorem(options)).process('@media (min-width: 500px) { .rule { font-size: 16px } }').css;\n        var expected = '@media (min-width: 31.25rem) { .rule { font-size: 1rem } }';\n\n        expect(processed).toBe(expected);\n    });\n});\n\ndescribe('minPixelValue', function () {\n    it('should not replace values below minPixelValue', function () {\n        var options = {\n            propWhiteList: [],\n            minPixelValue: 2\n        };\n        var rules = '.rule { border: 1px solid #000; font-size: 16px; margin: 1px 10px; }';\n        var expected = '.rule { border: 1px solid #000; font-size: 1rem; margin: 1px 0.625rem; }';\n        var processed = postcss(pxtorem(options)).process(rules).css;\n\n        expect(processed).toBe(expected);\n    });\n});\n\ndescribe('filter-prop-list', function () {\n    it('should find \"exact\" matches from propList', function () {\n        var propList = ['font-size', 'margin', '!padding', '*border*', '*', '*y', '!*font*'];\n        var expected = 'font-size,margin';\n        expect(filterPropList.exact(propList).join()).toBe(expected);\n    });\n\n    it('should find \"contain\" matches from propList and reduce to string', function () {\n        var propList = ['font-size', '*margin*', '!padding', '*border*', '*', '*y', '!*font*'];\n        var expected = 'margin,border';\n        expect(filterPropList.contain(propList).join()).toBe(expected);\n    });\n\n    it('should find \"start\" matches from propList and reduce to string', function () {\n        var propList = ['font-size', '*margin*', '!padding', 'border*', '*', '*y', '!*font*'];\n        var expected = 'border';\n        expect(filterPropList.startWith(propList).join()).toBe(expected);\n    });\n\n    it('should find \"end\" matches from propList and reduce to string', function () {\n        var propList = ['font-size', '*margin*', '!padding', 'border*', '*', '*y', '!*font*'];\n        var expected = 'y';\n        expect(filterPropList.endWith(propList).join()).toBe(expected);\n    });\n\n    it('should find \"not\" matches from propList and reduce to string', function () {\n        var propList = ['font-size', '*margin*', '!padding', 'border*', '*', '*y', '!*font*'];\n        var expected = 'padding';\n        expect(filterPropList.notExact(propList).join()).toBe(expected);\n    });\n\n    it('should find \"not contain\" matches from propList and reduce to string', function () {\n        var propList = ['font-size', '*margin*', '!padding', '!border*', '*', '*y', '!*font*'];\n        var expected = 'font';\n        expect(filterPropList.notContain(propList).join()).toBe(expected);\n    });\n\n    it('should find \"not start\" matches from propList and reduce to string', function () {\n        var propList = ['font-size', '*margin*', '!padding', '!border*', '*', '*y', '!*font*'];\n        var expected = 'border';\n        expect(filterPropList.notStartWith(propList).join()).toBe(expected);\n    });\n\n    it('should find \"not end\" matches from propList and reduce to string', function () {\n        var propList = ['font-size', '*margin*', '!padding', '!border*', '*', '!*y', '!*font*'];\n        var expected = 'y';\n        expect(filterPropList.notEndWith(propList).join()).toBe(expected);\n    });\n});\n"}